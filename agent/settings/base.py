"""
Django settings for agent project.

Generated by 'django-admin startproject' using Django 3.2.12.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""
import os
from datetime import timedelta
from pathlib import Path

import requests
from corsheaders.defaults import default_headers

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',
    'health_check',
    'corsheaders',
    'safedelete',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'rest_framework',
    'django_filters',
    'rest_framework.authtoken',
    'dj_rest_auth',
    'dj_rest_auth.registration',
    'django_rest_passwordreset',
    'rest_framework_simplejwt.token_blacklist',
    'django_celery_beat',
    'django_celery_results',
    'agent.apps.accounts.apps.AccountsConfig',
    'agent.apps.questions.apps.QuestionsConfig',
    'agent.apps.call_sessions.apps.CallSessionsConfig',
    'agent.apps.call_schedules.apps.CallSchedulesConfig',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    # 'agent.utils.middleware.DefaultContentLengthMiddleware',
]

ROOT_URLCONF = 'agent.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR, os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'agent.wsgi.application'


# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# allauth settings: https://django-allauth.readthedocs.io/en/latest/configuration.html
SITE_ID = 1
DJANGO_REST_PASSWORDRESET_NO_INFORMATION_LEAKAGE = True
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_UNIQUE_EMAIL = True
ACCOUNT_AUTHENTICATION_METHOD = 'email'
ACCOUNT_EMAIL_VERIFICATION = 'none'
ACCOUNT_SIGNUP_PASSWORD_ENTER_TWICE = False
ACCOUNT_USER_MODEL_USERNAME_FIELD = None
ACCOUNT_USERNAME_REQUIRED = False

# https://jwt.io/introduction
REST_USE_JWT = True
JWT_AUTH_COOKIE = 'auth'
JWT_AUTH_REFRESH_COOKIE = 'auth-refresh'
# Token auth expiring time
TOKEN_EXPIRED_AFTER_SECONDS = 86400

DJANGO_REST_MULTITOKENAUTH_RESET_TOKEN_EXPIRY_TIME = 72
DJANGO_REST_MULTITOKENAUTH_REQUIRE_USABLE_PASSWORD = False
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(hours=24),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=2),
    'ROTATE_REFRESH_TOKENS': True,
    'BLACKLIST_AFTER_ROTATION': True,
    'JWT_ENCODE_HANDLER': 'rest_framework_jwt.utils.jwt_encode_handler',
    'JWT_PAYLOAD_HANDLER': 'rest_framework_jwt.utils.jwt_payload_handler',
    'SIGNING_KEY': SECRET_KEY,
}

# Authentication variables
AUTH_USER_MODEL = 'accounts.CustomUser'

# dj-rest-auth custom serializers
REST_AUTH_SERIALIZERS = {
    'LOGIN_SERIALIZER': 'agent.apps.accounts.serializers.CustomLoginSerializer',
    'USER_DETAILS_SERIALIZER': 'agent.apps.accounts.serializers.CustomUserDetailsSerializer',
}

REST_AUTH_REGISTER_SERIALIZERS = {
    'REGISTER_SERIALIZER': 'agent.apps.accounts.serializers.CustomRegisterSerializer',
}

# Authentication scheme
# TODO investigate vulnerability to CSRF attacks when using JWT_AUTH_COOKIE
# https://github.com/jpadilla/django-rest-framework-jwt/issues/338

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.TokenAuthentication',
        'agent.authentication.ExpiringTokenAuthentication',
        'dj_rest_auth.jwt_auth.JWTCookieAuthentication',
    ),
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.LimitOffsetPagination',
    'PAGE_SIZE': 100,
}


FIELD_ENCRYPTION_KEYS = ['bd99c670019ba6e53eb581860d86b8b36ec876f4bac9ac0b88a97ab89f78a634']

# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = False

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = 'static'

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

CORS_ALLOW_HEADERS = list(default_headers) + ["x-authorization", 'seccode']

# AWS settings
AWS_ACCESS_KEY_ID = os.environ.get('AWS_ACCESS_KEY_ID')
AWS_SECRET_ACCESS_KEY = os.environ.get('AWS_SECRET_ACCESS_KEY')


# stripe settings
STRIPE_SECRET_KEY = os.environ.get('STRIPE_SECRET_KEY')
STRIPE_SIGNING_KEY = os.environ.get('STRIPE_SIGNING_KEY')


def get_ec2_instance_ip():
    metadata_url = "http://169.254.169.254/latest"
    try:
        token = requests.put(
            metadata_url + "/api/token",
            timeout=5,
            headers={
                "X-aws-ec2-metadata-token-ttl-seconds": "60",
            },
        ).text
        return requests.get(
            metadata_url + "/meta-data/local-ipv4",
            timeout=5,
            headers={
                "X-aws-ec2-metadata-token": token,
            },
        ).text
    except requests.exceptions.RequestException:
        return None


CELERY_BEAT_SCHEDULER = 'django_celery_beat.schedulers:DatabaseScheduler'
CELERY_RESULT_BACKEND = 'django-db'
CELERY_RESULT_EXPIRES = 2592000  # 30 days
CELERY_BROKER_TRANSPORT_OPTIONS = {'visibility_timeout': 691200}  # 8 DAYS

ZENDESK_SUBDOMAIN = os.environ.get('ZENDESK_SUBDOMAIN')
ZENDESK_TOKEN = os.environ.get('ZENDESK_TOKEN')
ZENDESK_EMAIL = os.environ.get('ZENDESK_EMAIL')

EXPERT_SENDER_API_URL = os.environ.get('EXPERT_SENDER_API_URL')
EXPERT_SENDER_API_KEY = os.environ.get('EXPERT_SENDER_API_KEY')

# function that called before send event to sentry
def before_send(event, hint):
    if 'logger' in event and event['logger'] == 'django.security.DisallowedHost':
        return None

    return event